/* The following code was generated by JFlex 1.6.1 */

/*
	JFlex lexgreiningardæmi byggt á lesgreini fyrir NanoLisp.
	Höfundur: Snorri Agnarsson, janúar 2017

	Þennan lesgreini má þýða og keyra með skipununum
		java -jar JFlex-1.6.0.jar nanolexer.jflex
		javac NanoLexer.java
		java NanoLexer inntaksskrá > úttaksskrá
	Einnig má nota forritið 'make', ef viðeigandi 'makefile'
	er til staðar:
		make test
 */

import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>micromorphoflexer.jflex</tt>
 */
public class NanoLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\50\1\43\1\45\1\46\1\44\22\0\1\50\1\26\1\5"+
    "\2\0\1\22\1\27\1\14\2\20\1\24\1\23\1\0\1\4\1\2"+
    "\1\24\4\15\4\16\2\1\1\22\1\42\1\26\1\25\1\26\1\22"+
    "\1\0\4\21\1\3\25\21\1\20\1\6\1\20\1\22\2\0\1\34"+
    "\1\7\2\21\1\33\1\12\1\21\1\40\1\36\2\21\1\32\1\21"+
    "\1\11\3\21\1\13\1\35\1\10\1\31\1\41\1\37\3\21\1\47"+
    "\1\30\1\17\1\22\6\0\1\45\44\0\1\21\12\0\1\21\4\0"+
    "\1\21\5\0\27\21\1\0\37\21\1\0\u01ca\21\4\0\14\21\16\0"+
    "\5\21\7\0\1\21\1\0\1\21\201\0\5\21\1\0\2\21\2\0"+
    "\4\21\1\0\1\21\6\0\1\21\1\0\3\21\1\0\1\21\1\0"+
    "\24\21\1\0\123\21\1\0\213\21\10\0\246\21\1\0\46\21\2\0"+
    "\1\21\7\0\47\21\110\0\33\21\5\0\3\21\55\0\53\21\43\0"+
    "\2\21\1\0\143\21\1\0\1\21\17\0\2\21\7\0\2\21\12\0"+
    "\3\21\2\0\1\21\20\0\1\21\1\0\36\21\35\0\131\21\13\0"+
    "\1\21\30\0\41\21\11\0\2\21\4\0\1\21\5\0\26\21\4\0"+
    "\1\21\11\0\1\21\3\0\1\21\27\0\31\21\107\0\23\21\121\0"+
    "\66\21\3\0\1\21\22\0\1\21\7\0\12\21\17\0\20\21\4\0"+
    "\10\21\2\0\2\21\2\0\26\21\1\0\7\21\1\0\1\21\3\0"+
    "\4\21\3\0\1\21\20\0\1\21\15\0\2\21\1\0\3\21\16\0"+
    "\2\21\23\0\6\21\4\0\2\21\2\0\26\21\1\0\7\21\1\0"+
    "\2\21\1\0\2\21\1\0\2\21\37\0\4\21\1\0\1\21\23\0"+
    "\3\21\20\0\11\21\1\0\3\21\1\0\26\21\1\0\7\21\1\0"+
    "\2\21\1\0\5\21\3\0\1\21\22\0\1\21\17\0\2\21\43\0"+
    "\10\21\2\0\2\21\2\0\26\21\1\0\7\21\1\0\2\21\1\0"+
    "\5\21\3\0\1\21\36\0\2\21\1\0\3\21\17\0\1\21\21\0"+
    "\1\21\1\0\6\21\3\0\3\21\1\0\4\21\3\0\2\21\1\0"+
    "\1\21\1\0\2\21\3\0\2\21\3\0\3\21\3\0\14\21\26\0"+
    "\1\21\64\0\10\21\1\0\3\21\1\0\27\21\1\0\20\21\3\0"+
    "\1\21\32\0\2\21\6\0\2\21\43\0\10\21\1\0\3\21\1\0"+
    "\27\21\1\0\12\21\1\0\5\21\3\0\1\21\40\0\1\21\1\0"+
    "\2\21\17\0\2\21\22\0\10\21\1\0\3\21\1\0\51\21\2\0"+
    "\1\21\20\0\1\21\21\0\2\21\30\0\6\21\5\0\22\21\3\0"+
    "\30\21\1\0\11\21\1\0\1\21\2\0\7\21\72\0\60\21\1\0"+
    "\2\21\14\0\7\21\72\0\2\21\1\0\1\21\2\0\2\21\1\0"+
    "\1\21\2\0\1\21\6\0\4\21\1\0\7\21\1\0\3\21\1\0"+
    "\1\21\1\0\1\21\2\0\2\21\1\0\4\21\1\0\2\21\11\0"+
    "\1\21\2\0\5\21\1\0\1\21\25\0\4\21\40\0\1\21\77\0"+
    "\10\21\1\0\44\21\33\0\5\21\163\0\53\21\24\0\1\21\20\0"+
    "\6\21\4\0\4\21\3\0\1\21\3\0\2\21\7\0\3\21\4\0"+
    "\15\21\14\0\1\21\21\0\46\21\1\0\1\21\5\0\1\21\2\0"+
    "\53\21\1\0\u014d\21\1\0\4\21\2\0\7\21\1\0\1\21\1\0"+
    "\4\21\2\0\51\21\1\0\4\21\2\0\41\21\1\0\4\21\2\0"+
    "\7\21\1\0\1\21\1\0\4\21\2\0\17\21\1\0\71\21\1\0"+
    "\4\21\2\0\103\21\45\0\20\21\20\0\125\21\14\0\u026c\21\2\0"+
    "\21\21\1\0\32\21\5\0\113\21\6\0\10\21\7\0\15\21\1\0"+
    "\4\21\16\0\22\21\16\0\22\21\16\0\15\21\1\0\3\21\17\0"+
    "\64\21\43\0\1\21\4\0\1\21\103\0\130\21\10\0\51\21\1\0"+
    "\1\21\5\0\106\21\12\0\37\21\61\0\36\21\2\0\5\21\13\0"+
    "\54\21\25\0\7\21\70\0\27\21\11\0\65\21\122\0\1\21\135\0"+
    "\57\21\21\0\7\21\67\0\36\21\15\0\2\21\12\0\54\21\32\0"+
    "\44\21\51\0\3\21\12\0\44\21\153\0\4\21\1\0\4\21\3\0"+
    "\2\21\11\0\300\21\100\0\u0116\21\2\0\6\21\2\0\46\21\2\0"+
    "\6\21\2\0\10\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\37\21\2\0\65\21\1\0\7\21\1\0\1\21\3\0\3\21\1\0"+
    "\7\21\3\0\4\21\2\0\6\21\4\0\15\21\5\0\3\21\1\0"+
    "\7\21\53\0\1\45\1\45\107\0\1\21\15\0\1\21\20\0\15\21"+
    "\145\0\1\21\4\0\1\21\2\0\12\21\1\0\1\21\3\0\5\21"+
    "\6\0\1\21\1\0\1\21\1\0\1\21\1\0\4\21\1\0\13\21"+
    "\2\0\4\21\5\0\5\21\4\0\1\21\64\0\2\21\u0a7b\0\57\21"+
    "\1\0\57\21\1\0\205\21\6\0\4\21\3\0\2\21\14\0\46\21"+
    "\1\0\1\21\5\0\1\21\2\0\70\21\7\0\1\21\20\0\27\21"+
    "\11\0\7\21\1\0\7\21\1\0\7\21\1\0\7\21\1\0\7\21"+
    "\1\0\7\21\1\0\7\21\1\0\7\21\120\0\1\21\u01d5\0\2\21"+
    "\52\0\5\21\5\0\2\21\4\0\126\21\6\0\3\21\1\0\132\21"+
    "\1\0\4\21\5\0\51\21\3\0\136\21\21\0\33\21\65\0\20\21"+
    "\u0200\0\u19b6\21\112\0\u51cd\21\63\0\u048d\21\103\0\56\21\2\0\u010d\21"+
    "\3\0\20\21\12\0\2\21\24\0\57\21\20\0\37\21\2\0\106\21"+
    "\61\0\11\21\2\0\147\21\2\0\4\21\1\0\36\21\2\0\2\21"+
    "\105\0\13\21\1\0\3\21\1\0\4\21\1\0\27\21\35\0\64\21"+
    "\16\0\62\21\76\0\6\21\3\0\1\21\16\0\34\21\12\0\27\21"+
    "\31\0\35\21\7\0\57\21\34\0\1\21\20\0\5\21\1\0\12\21"+
    "\12\0\5\21\1\0\51\21\27\0\3\21\1\0\10\21\24\0\27\21"+
    "\3\0\1\21\3\0\62\21\1\0\1\21\3\0\2\21\2\0\5\21"+
    "\2\0\1\21\1\0\1\21\30\0\3\21\2\0\13\21\7\0\3\21"+
    "\14\0\6\21\2\0\6\21\2\0\6\21\11\0\7\21\1\0\7\21"+
    "\1\0\53\21\1\0\4\21\4\0\2\21\132\0\43\21\35\0\u2ba4\21"+
    "\14\0\27\21\4\0\61\21\u2104\0\u016e\21\2\0\152\21\46\0\7\21"+
    "\14\0\5\21\5\0\1\21\1\0\12\21\1\0\15\21\1\0\5\21"+
    "\1\0\1\21\1\0\2\21\1\0\2\21\1\0\154\21\41\0\u016b\21"+
    "\22\0\100\21\2\0\66\21\50\0\14\21\164\0\5\21\1\0\207\21"+
    "\44\0\32\21\6\0\32\21\13\0\131\21\3\0\6\21\2\0\6\21"+
    "\2\0\6\21\2\0\3\21\43\0\14\21\1\0\32\21\1\0\23\21"+
    "\1\0\2\21\1\0\17\21\2\0\16\21\42\0\173\21\u0185\0\35\21"+
    "\3\0\61\21\57\0\40\21\20\0\21\21\1\0\10\21\6\0\46\21"+
    "\12\0\36\21\2\0\44\21\4\0\10\21\60\0\236\21\142\0\50\21"+
    "\10\0\64\21\234\0\u0137\21\11\0\26\21\12\0\10\21\230\0\6\21"+
    "\2\0\1\21\1\0\54\21\1\0\2\21\3\0\1\21\2\0\27\21"+
    "\12\0\27\21\11\0\37\21\141\0\26\21\12\0\32\21\106\0\70\21"+
    "\6\0\2\21\100\0\1\21\17\0\4\21\1\0\3\21\1\0\33\21"+
    "\54\0\35\21\3\0\35\21\43\0\10\21\1\0\34\21\33\0\66\21"+
    "\12\0\26\21\12\0\23\21\15\0\22\21\156\0\111\21\u03ba\0\65\21"+
    "\113\0\55\21\40\0\31\21\32\0\44\21\51\0\43\21\3\0\1\21"+
    "\14\0\60\21\16\0\4\21\25\0\1\21\45\0\22\21\1\0\31\21"+
    "\204\0\57\21\46\0\10\21\2\0\2\21\2\0\26\21\1\0\7\21"+
    "\1\0\2\21\1\0\5\21\3\0\1\21\37\0\5\21\u011e\0\60\21"+
    "\24\0\2\21\1\0\1\21\270\0\57\21\121\0\60\21\24\0\1\21"+
    "\73\0\53\21\u01f5\0\100\21\37\0\1\21\u01c0\0\71\21\u0507\0\u0399\21"+
    "\u0c67\0\u042f\21\u33d1\0\u0239\21\7\0\37\21\161\0\36\21\22\0\60\21"+
    "\20\0\4\21\37\0\25\21\5\0\23\21\u0370\0\105\21\13\0\1\21"+
    "\102\0\15\21\u4060\0\2\21\u0bfe\0\153\21\5\0\15\21\3\0\11\21"+
    "\7\0\12\21\u1766\0\125\21\1\0\107\21\1\0\2\21\2\0\1\21"+
    "\2\0\2\21\2\0\4\21\1\0\14\21\1\0\1\21\1\0\7\21"+
    "\1\0\101\21\1\0\4\21\2\0\10\21\1\0\7\21\1\0\34\21"+
    "\1\0\4\21\1\0\5\21\1\0\1\21\3\0\7\21\1\0\u0154\21"+
    "\2\0\31\21\1\0\31\21\1\0\37\21\1\0\31\21\1\0\37\21"+
    "\1\0\31\21\1\0\37\21\1\0\31\21\1\0\37\21\1\0\31\21"+
    "\1\0\10\21\u1034\0\305\21\u053b\0\4\21\1\0\33\21\1\0\2\21"+
    "\1\0\1\21\2\0\1\21\1\0\12\21\1\0\4\21\1\0\1\21"+
    "\1\0\1\21\6\0\1\21\4\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\3\21\1\0\2\21\1\0\1\21\2\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\2\21\1\0\1\21"+
    "\2\0\4\21\1\0\7\21\1\0\4\21\1\0\4\21\1\0\1\21"+
    "\1\0\12\21\1\0\21\21\5\0\3\21\1\0\5\21\1\0\21\21"+
    "\u1144\0\ua6d7\21\51\0\u1035\21\13\0\336\21\u3fe2\0\u021e\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\4\3\1\1"+
    "\1\5\3\4\2\1\4\3\1\1\1\6\1\5\2\0"+
    "\1\2\1\0\4\3\2\0\1\3\1\7\2\3\2\0"+
    "\1\2\4\3\2\0\2\3\1\10\3\0\1\2\1\3"+
    "\1\11\1\3\2\12\1\0\1\2\1\0\2\3\1\13"+
    "\1\14\1\0\1\15\1\16\2\0\1\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\51\0\u01c3\0\51\0\u01ec\0\u0215"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\51\0\u0334"+
    "\0\u035d\0\315\0\51\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a"+
    "\0\u0453\0\u047c\0\u04a5\0\173\0\u04ce\0\u04f7\0\u0520\0\u0549"+
    "\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691"+
    "\0\u06ba\0\173\0\u06e3\0\u070c\0\u0735\0\173\0\u075e\0\u0787"+
    "\0\u07b0\0\51\0\u07d9\0\u0802\0\u082b\0\u082b\0\u0854\0\u087d"+
    "\0\173\0\51\0\u08a6\0\173\0\173\0\u08cf\0\u08f8\0\u0802";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\2\1\4"+
    "\1\7\1\10\1\11\1\12\1\13\2\3\2\14\1\4"+
    "\1\2\1\15\1\16\2\17\1\20\1\21\2\4\1\22"+
    "\2\4\1\23\1\24\1\4\1\25\1\26\2\27\1\0"+
    "\1\27\1\30\1\27\52\0\1\3\1\31\12\0\2\3"+
    "\33\0\1\4\1\0\2\4\2\0\5\4\1\0\2\4"+
    "\2\0\21\4\13\0\1\16\44\0\5\32\1\33\1\34"+
    "\42\32\1\0\1\4\1\0\2\4\2\0\4\4\1\35"+
    "\1\0\2\4\2\0\21\4\10\0\1\4\1\0\2\4"+
    "\2\0\5\4\1\0\2\4\2\0\10\4\1\36\10\4"+
    "\10\0\1\4\1\0\2\4\2\0\5\4\1\0\2\4"+
    "\2\0\13\4\1\37\5\4\10\0\1\4\1\0\2\4"+
    "\2\0\5\4\1\0\2\4\2\0\12\4\1\40\6\4"+
    "\7\0\6\41\1\42\5\41\1\0\34\41\23\0\1\16"+
    "\52\0\1\16\52\0\1\16\51\0\1\16\21\0\1\4"+
    "\1\0\2\4\2\0\5\4\1\0\2\4\2\0\11\4"+
    "\1\43\7\4\10\0\1\4\1\0\2\4\2\0\3\4"+
    "\1\44\1\4\1\0\2\4\2\0\21\4\10\0\1\4"+
    "\1\0\2\4\2\0\5\4\1\0\2\4\2\0\17\4"+
    "\1\45\1\4\10\0\1\4\1\0\2\4\2\0\5\4"+
    "\1\0\2\4\2\0\13\4\1\46\5\4\51\0\1\47"+
    "\50\0\1\50\7\0\1\51\13\0\2\51\37\0\12\32"+
    "\33\0\1\4\1\0\2\4\2\0\5\4\1\0\2\4"+
    "\2\0\10\4\1\52\10\4\10\0\1\4\1\0\2\4"+
    "\2\0\5\4\1\0\2\4\2\0\11\4\1\53\7\4"+
    "\10\0\1\4\1\0\2\4\2\0\5\4\1\0\2\4"+
    "\2\0\11\4\1\54\7\4\10\0\1\4\1\0\2\4"+
    "\2\0\1\4\1\55\3\4\1\0\2\4\2\0\21\4"+
    "\23\0\1\33\41\0\10\41\1\56\1\57\33\0\1\4"+
    "\1\0\2\4\2\0\5\4\1\0\2\4\2\0\14\4"+
    "\1\60\4\4\10\0\1\4\1\0\2\4\2\0\5\4"+
    "\1\0\2\4\2\0\15\4\1\61\3\4\10\0\1\4"+
    "\1\0\2\4\2\0\4\4\1\62\1\0\2\4\2\0"+
    "\21\4\51\0\1\63\50\0\1\64\7\0\1\51\1\0"+
    "\1\65\11\0\2\51\14\0\1\65\16\0\1\4\1\0"+
    "\2\4\2\0\5\4\1\0\2\4\2\0\12\4\1\66"+
    "\6\4\10\0\1\4\1\0\2\4\2\0\5\4\1\0"+
    "\2\4\2\0\11\4\1\66\7\4\10\0\1\4\1\0"+
    "\2\4\2\0\5\4\1\0\2\4\2\0\14\4\1\52"+
    "\4\4\10\0\1\4\1\0\2\4\2\0\5\4\1\0"+
    "\2\4\2\0\10\4\1\67\10\4\23\0\1\33\2\57"+
    "\46\0\1\33\2\41\33\0\1\4\1\0\2\4\2\0"+
    "\5\4\1\0\2\4\2\0\12\4\1\70\6\4\10\0"+
    "\1\4\1\0\2\4\2\0\5\4\1\0\2\4\2\0"+
    "\11\4\1\71\7\4\7\0\43\63\1\72\1\73\2\72"+
    "\2\63\42\0\1\74\7\0\1\75\2\0\1\76\10\0"+
    "\2\75\4\0\1\76\26\0\1\4\1\0\2\4\2\0"+
    "\4\4\1\77\1\0\2\4\2\0\21\4\10\0\1\4"+
    "\1\0\2\4\2\0\5\4\1\0\2\4\2\0\15\4"+
    "\1\100\3\4\10\0\1\4\1\0\2\4\2\0\5\4"+
    "\1\0\2\4\2\0\12\4\1\101\6\4\52\0\1\102"+
    "\5\0\42\74\1\103\2\74\2\0\2\74\1\0\1\75"+
    "\13\0\2\75\33\0\1\4\1\0\2\4\2\0\2\4"+
    "\1\104\2\4\1\0\2\4\2\0\21\4\10\0\1\4"+
    "\1\0\2\4\2\0\3\4\1\105\1\4\1\0\2\4"+
    "\2\0\21\4\7\0\42\74\1\106\2\74\2\0\44\74"+
    "\1\107\2\74\2\0\21\74\1\110\22\74\1\107\2\74"+
    "\2\0\2\74";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2337];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\1\1\1\11\10\1\1\11"+
    "\1\1\2\0\1\11\1\0\4\1\2\0\4\1\2\0"+
    "\5\1\2\0\3\1\3\0\4\1\1\11\1\1\1\0"+
    "\1\1\1\0\3\1\1\11\1\0\2\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

// Skilgreiningar á tókum (tokens):
final static int ERROR = -1;
final static int IF = 1001;
final static int ELSE = 1002;
final static int ELSEIF = 1003;
final static int NAME = 1004;
final static int LITERAL = 1005;
final static int WHILE = 1006;
final static int RETURN = 1007;
final static int OPERATOR = 1008;
final static int VAR = 1009;

// Breyta sem mun innihalda les (lexeme):
public static String lexeme;

// Þetta keyrir lexgreininn:
public static void main( String[] args ) throws Exception
{
	NanoLexer lexer = new NanoLexer(new FileReader(args[0]));
	int token = lexer.yylex();
	int token2;
	while( token!=0 )
	{
		System.out.println("Fyrsti:" + ""+token+": \'"+lexeme+"\'");
		token = lexer.yylex();
		System.out.println("Annar:" + token);
		token2 = lexer.yylex();
		lexer.yypushback(0);
		System.out.println("Thridji:" + token2);
	}
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public NanoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2306) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext();
	return ERROR;
            }
          case 15: break;
          case 2: 
            { lexeme = yytext();
	return LITERAL;
            }
          case 16: break;
          case 3: 
            { lexeme = yytext();
	return NAME;
            }
          case 17: break;
          case 4: 
            { lexeme = yytext();
	return OPERATOR;
            }
          case 18: break;
          case 5: 
            { lexeme = yytext();
	return yycharat(0);
            }
          case 19: break;
          case 6: 
            { 
            }
          case 20: break;
          case 7: 
            { lexeme = yytext();
	return IF;
            }
          case 21: break;
          case 8: 
            { lexeme = yytext();
	return VAR;
            }
          case 22: break;
          case 9: 
            { lexeme = yytext();
	return ELSE;
            }
          case 23: break;
          case 10: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { 
            }
          case 24: break;
          case 11: 
            { lexeme = yytext();
	return WHILE;
            }
          case 25: break;
          case 12: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { 
            }
          case 26: break;
          case 13: 
            { lexeme = yytext();
	return RETURN;
            }
          case 27: break;
          case 14: 
            { lexeme = yytext();
	return ELSEIF;
            }
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
